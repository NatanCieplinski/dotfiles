{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Vue 3 type props": {
		"prefix": "props",
		"body": [
			"const props = defineProps<{",
			"  $1",
			"}>()"
		]
	},
	"Vue 3 type props with defaults": {
		"prefix": "dprops",
		"body": [
			"withDefaults(defineProps<{",
			"  $1",
			"}>(),{",
			"  $2",
			"})"
		]
	},
	"Vue 3 emits": {
		"prefix": "emits",
		"body": [
			"const emit = defineEmits([$1])"
		]
	},
	"Vue 3 type emits": {
		"prefix": "temits",
		"body": [
			"const emit = defineEmits<{",
			"  (e: '$1', $2): void",
			"}>()"
		]
	},
	"Vue 3 type emits and props": {
		"prefix": "tep",
		"body": [
			"const emit = defineEmits<{",
			"  (e: '$1', $2): void",
			"}>(),",
			"",
			"const props = defineProps<{",
			"  $3",
			"}>()"
		]
	},
}